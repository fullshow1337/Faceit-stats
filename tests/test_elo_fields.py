#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π ELO –≤ FACEIT API
"""

import asyncio
import os
import sys
import json
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from api_clients.fast_api_client_httpx import FastFaceitClientHttpx

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_elo_fields(steam_id: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è ELO –≤ API"""
    api_key = os.getenv("FACEIT_API_KEY")
    if not api_key:
        print("FACEIT_API_KEY not found")
        return
    
    print(f"Testing ELO fields for Steam ID: {steam_id}")
    print("=" * 60)
    
    try:
        async with FastFaceitClientHttpx(api_key) as client:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
            player_data = await client.get_player_by_steam_id(steam_id)
            if not player_data:
                print("Player not found")
                return
            
            player_id = player_data.get("player_id")
            if not player_id:
                print("Player ID not found")
                return
            
            print("üîç Player Data Fields:")
            print(f"Available fields: {list(player_data.keys())}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º games/cs2
            if "games" in player_data and "cs2" in player_data["games"]:
                cs2_data = player_data["games"]["cs2"]
                print(f"\nüéÆ CS2 Game Data:")
                print(f"Available CS2 fields: {list(cs2_data.keys())}")
                print(f"CS2 data: {json.dumps(cs2_data, indent=2)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º games/csgo
            if "games" in player_data and "csgo" in player_data["games"]:
                csgo_data = player_data["games"]["csgo"]
                print(f"\nüéÆ CSGO Game Data:")
                print(f"Available CSGO fields: {list(csgo_data.keys())}")
                print(f"CSGO data: {json.dumps(csgo_data, indent=2)}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await client.get_player_stats(player_id)
            if stats:
                print(f"\nüìä Stats Data:")
                print(f"Available stats fields: {list(stats.keys())}")
                
                if "lifetime" in stats:
                    lifetime = stats["lifetime"]
                    print(f"\nüìà Lifetime Stats:")
                    print(f"Available lifetime fields: {list(lifetime.keys())}")
                    
                    # –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å ELO
                    elo_fields = [field for field in lifetime.keys() if 'elo' in field.lower() or 'peak' in field.lower() or 'max' in field.lower()]
                    if elo_fields:
                        print(f"\nüéØ ELO-related fields found: {elo_fields}")
                        for field in elo_fields:
                            print(f"  {field}: {lifetime[field]}")
                    else:
                        print("\n‚ùå No ELO-related fields found in lifetime stats")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
                    numeric_fields = []
                    for field, value in lifetime.items():
                        if isinstance(value, (int, float)) and value > 0:
                            numeric_fields.append((field, value))
                    
                    if numeric_fields:
                        print(f"\nüìä All numeric fields:")
                        for field, value in sorted(numeric_fields, key=lambda x: x[1], reverse=True):
                            print(f"  {field}: {value}")
                else:
                    print("‚ùå No lifetime stats found")
            else:
                print("‚ùå No stats data found")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è ELO
            print(f"\nüîç Other possible ELO fields in player_data:")
            for key, value in player_data.items():
                if isinstance(value, (int, float)) and value > 1000:  # ELO –æ–±—ã—á–Ω–æ > 1000
                    print(f"  {key}: {value}")
            
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
    steam_id = "76561198376323869"  # Swisstec
    asyncio.run(test_elo_fields(steam_id)) 