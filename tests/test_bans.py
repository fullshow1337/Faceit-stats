#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
"""

import asyncio
import os
import sys
from dotenv import load_dotenv
from api_clients.fast_api_client_httpx import FastFaceitClientHttpx

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_bans_for_player(steam_id: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    api_key = os.getenv("FACEIT_API_KEY")
    if not api_key:
        print("FACEIT_API_KEY not found")
        return
    
    print(f"Testing bans for Steam ID: {steam_id}")
    print("=" * 50)
    
    try:
        async with FastFaceitClientHttpx(api_key) as client:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
            result = await client.get_complete_player_data(steam_id)
            
            if result:
                print(f"‚úÖ Player found: {result.get('nickname')}")
                print(f"Player ID: {result.get('player_id')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–∞–Ω—ã
                bans = result.get('bans', [])
                print(f"\nüö´ Processed bans found: {len(bans)}")
                
                if bans:
                    print("\nüìã Processed Ban Details:")
                    for i, ban in enumerate(bans, 1):
                        print(f"\n  Ban #{i}:")
                        print(f"    Reason: {ban.get('reason', 'Unknown')}")
                        print(f"    Start Date: {ban.get('start_date', 'Unknown')}")
                        print(f"    End Date: {ban.get('end_date', 'Unknown')}")
                else:
                    print("‚úÖ No active bans found")
                
                # –¢–∞–∫–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –±–∞–Ω–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                print(f"\nüîç Testing direct bans API call for comparison...")
                player_id = result.get('player_id')
                if player_id:
                    direct_bans = await client.get_player_bans(player_id)
                    print(f"Direct API call returned {len(direct_bans)} raw bans")
                    
                    if direct_bans:
                        print("Raw ban data from API:")
                        for i, ban in enumerate(direct_bans[:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                            print(f"  Raw Ban {i}: {ban}")
                
            else:
                print("‚ùå Player not found")
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

async def test_multiple_players():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞–Ω–æ–≤"""
    # –°–ø–∏—Å–æ–∫ Steam ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_steam_ids = [
        "76561199566504859",  # fullshow- (—Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫)
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ Steam ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ]
    
    print("Testing multiple players for bans...")
    print("=" * 50)
    
    for steam_id in test_steam_ids:
        await test_bans_for_player(steam_id)
        print("\n" + "=" * 50)

if __name__ == "__main__":
    print("Ban Testing for FACEIT API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    asyncio.run(test_bans_for_player("76561199566504859"))
    
    # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
    # asyncio.run(test_multiple_players()) 