import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from api_clients.fast_api_client_httpx import FastFaceitClientHttpx
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

async def test_detailed_bans():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞–Ω–æ–≤"""
    api_key = os.getenv("FACEIT_API_KEY")
    if not api_key:
        logger.error("‚ùå FACEIT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
        
    client = FastFaceitClientHttpx(api_key)
    
    # Steam ID –∏–≥—Ä–æ–∫–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º –±–∞–Ω–æ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Steam ID)
    steam_id = "76561198376323869"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Steam ID
    
    try:
        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞–Ω–æ–≤ –¥–ª—è Steam ID: {steam_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        player_data = await client.get_player_by_steam_id(steam_id)
        
        if player_data:
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω—ã
            bans = player_data.get("bans", [])
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –±–∞–Ω–æ–≤: {len(bans)}")
            
            for i, ban in enumerate(bans, 1):
                logger.info(f"\n--- –ë–∞–Ω #{i} ---")
                logger.info(f"–ü—Ä–∏—á–∏–Ω–∞: {ban.get('reason')}")
                logger.info(f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {ban.get('start_date')}")
                logger.info(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {ban.get('end_date')}")
                
                logger.info("‚úÖ –ë–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            if not bans:
                logger.info("‚ÑπÔ∏è –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –±–∞–Ω–æ–≤")
                
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

async def test_ban_processing_with_mock_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞–Ω–æ–≤ —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏"""
    api_key = os.getenv("FACEIT_API_KEY", "dummy_key_for_testing")
    client = FastFaceitClientHttpx(api_key)
    
    # –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –±–∞–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    mock_bans = [
        {
            "type": "VAC",
            "reason": "Smurfing",
            "starts_at": "2024-01-01T00:00:00Z",
            "ends_at": "2025-12-31T23:59:59Z"  # –ê–∫—Ç–∏–≤–Ω—ã–π –±–∞–Ω (–≤ –±—É–¥—É—â–µ–º)
        },
        {
            "type": "Game",
            "reason": "Toxic behavior",
            "starts_at": 1704067200,  # Unix timestamp
            "ends_at": None  # –ù–∞–≤—Å–µ–≥–¥–∞ = –∞–∫—Ç–∏–≤–µ–Ω
        },
        {
            "type": "Expired",
            "reason": "Old ban",
            "starts_at": "2023-01-01T00:00:00Z",
            "ends_at": "2023-12-31T23:59:59Z"  # –ò—Å—Ç–µ–∫—à–∏–π –±–∞–Ω
        },
        {
            "type": "Recent",
            "reason": "Recent ban",
            "starts_at": "2024-06-01T00:00:00Z",
            "ends_at": "2024-12-31T23:59:59Z"  # –ê–∫—Ç–∏–≤–Ω—ã–π –±–∞–Ω
        }
    ]
    
    logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)...")
    
    processed_bans = client._process_bans(mock_bans)
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {len(processed_bans)}")
    
    for i, ban in enumerate(processed_bans, 1):
        logger.info(f"\n--- –ê–∫—Ç–∏–≤–Ω—ã–π –±–∞–Ω #{i} ---")
        logger.info(f"–ü—Ä–∏—á–∏–Ω–∞: {ban.get('reason')}")
        logger.info(f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {ban.get('start_date')}")
        logger.info(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {ban.get('end_date')}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–Ω–æ–≤")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏
    asyncio.run(test_ban_processing_with_mock_data())
    
    print("\n" + "=" * 50)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    asyncio.run(test_detailed_bans()) 